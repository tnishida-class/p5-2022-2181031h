// テキスト「アニメーションの基本」
let x, y, vx, vy;
let ps = 3.3;//pixel size
let bs = ps*16;//block size
const g = 2; // 重力加速度
const vyMax = 30;
const jump = 30;
const ground = 125;
const size = 20;
let mx, my;
let s_mario_size;
let b_mario_size;
let kbx, kby, vkbx, vkby,kill_kuribo=0,time_k=0;
let dkx, dky, dkx_1, dky_1, dkx_2, dky_2;
let dokan_size;
let hit = 0;
let hit_coin = 0;
let hit_b = 0;
let hit_c1 = 0;
let hit_c2 = 0;
let hit_c3 = 0;
let hit_c4 = 0;
let kx, ky, vk;
const gk = 0.15;
let big = 0;
let nx, ny,kill_nokonoko=0,time_n=0;
let rx1, ry1, rx2, ry2, rx3, ry3, sx1, sy1, hx1, hy1;
let coin_size, time_coin;
let cox, coy;
let cox1, coy1, cox2, coy2, cox3, coy3, cox4, coy4, cox5, coy5, coy6, coy7;
let time_m=100,kill=0;
let pnx,pny,vpny;

//土管1のデータ
const data_1 = [
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  [1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3],
  [1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2],
  [1, 2, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 1, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3],
  [1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  [1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
];
//土管2のデータ
const data_2 = [
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  [1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3],
  [1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2],
  [1, 2, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 1, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3],
  [1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  [1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
];
//雲1のデータ
const data_3 = [
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 1, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 1, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0, 0],
  [0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0],
  [0, 0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0, 0],
  [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 1, 0, 0, 0],
  [0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 1, 0, 0],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 3, 2, 2, 1, 0, 0],
  [0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 1, 2, 2, 2, 1, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 1, 2, 2, 1, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
];
//雲2のデータ
const data_4 = [
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 1, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 1, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0, 0],
  [0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0],
  [0, 0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0, 0],
  [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 1, 0, 0, 0],
  [0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 1, 0, 0],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 3, 2, 2, 1, 0, 0],
  [0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0, 0],
  [0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0],
  [0, 0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0, 0],
  [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 1, 0, 0, 0],
  [0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 1, 0, 0],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 3, 2, 2, 1, 0, 0],
  [0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 1, 2, 2, 2, 1, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 1, 2, 2, 1, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
];
//雲3のデータ
const data_5 = [
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 1, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 1, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0, 0],
  [0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0],
  [0, 0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0, 0],
  [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 1, 0, 0, 0],
  [0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 1, 0, 0],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 3, 2, 2, 1, 0, 0],
  [0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0, 0],
  [0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0],
  [0, 0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0, 0],
  [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 1, 0, 0, 0],
  [0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 1, 0, 0],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 3, 2, 2, 1, 0, 0],
  [0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0, 0],
  [0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0],
  [0, 0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0, 0],
  [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 1, 0, 0, 0],
  [0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 1, 0, 0],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 3, 2, 2, 1, 0, 0],
  [0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 0],
  [0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 1, 2, 2, 2, 1, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 1, 2, 2, 1, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
];
//クリボーのデータ
const data_6 = [
  [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 1, 1, 0],
  [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1],
  [0, 0, 0, 2, 1, 2, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1],
  [0, 0, 2, 2, 1, 3, 3, 3, 3, 2, 2, 3, 3, 1, 1, 1],
  [0, 2, 2, 2, 2, 1, 1, 1, 3, 2, 3, 3, 3, 1, 1, 1],
  [2, 2, 2, 2, 2, 2, 1, 3, 3, 2, 3, 3, 3, 3, 1, 1],
  [2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 3, 3, 3, 3, 3, 0],
  [2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3],
  [2, 2, 2, 2, 2, 2, 1, 3, 3, 2, 3, 3, 3, 3, 3, 1],
  [0, 2, 2, 2, 2, 1, 1, 1, 3, 2, 3, 3, 3, 3, 1, 1],
  [0, 0, 2, 2, 1, 3, 3, 3, 3, 2, 2, 3, 3, 1, 1, 1],
  [0, 0, 0, 2, 1, 2, 2, 2, 2, 2, 2, 0, 0, 1, 1, 0],
  [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0],
];
//クリボー歩行のデータ
const data_6_b = [
  [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0],
  [0, 0, 0, 2, 1, 2, 2, 2, 2, 2, 2, 0, 0, 1, 1, 0],
  [0, 0, 2, 2, 1, 3, 3, 3, 3, 2, 2, 3, 3, 1, 1, 1],
  [0, 2, 2, 2, 2, 1, 1, 1, 3, 2, 3, 3, 3, 3, 1, 1],
  [2, 2, 2, 2, 2, 2, 1, 3, 3, 2, 3, 3, 3, 3, 3, 1],
  [2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 3, 3, 3, 3, 3, 0],
  [2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 3, 3, 3, 3, 3, 0],
  [2, 2, 2, 2, 2, 2, 1, 3, 3, 2, 3, 3, 3, 3, 1, 1],
  [0, 2, 2, 2, 2, 1, 1, 1, 3, 2, 3, 3, 3, 1, 1, 1],
  [0, 0, 2, 2, 1, 3, 3, 3, 3, 2, 2, 3, 3, 1, 1, 1],
  [0, 0, 0, 2, 1, 2, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1],
  [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1],
  [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 1, 1, 0],
  [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0],
];
//ツタのデータ
const data_7 = [
  [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0],
  [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 0, 0, 0],
  [2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 0],
  [2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 0],
  [2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 2, 2, 0, 0, 0],
  [0, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
  [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
];
//草のデータ1
const data_8 = [
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 1],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 1],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
];
//草のデータ3
const data_9 = [
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 1],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 1],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
];
//ちびマリオ
const data_10 = [
  [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0],
  [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
  [0, 0, 2, 2, 2, 3, 3, 2, 3, 0, 0, 0],
  [0, 2, 3, 2, 3, 3, 3, 2, 3, 3, 3, 0],
  [0, 2, 3, 2, 2, 3, 3, 3, 2, 3, 3, 3],
  [0, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 0],
  [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0],
  [0, 0, 2, 2, 1, 2, 2, 2, 0, 0, 0, 0],
  [0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 0],
  [2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2],
  [3, 3, 2, 1, 3, 1, 1, 3, 1, 2, 3, 3],
  [3, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 3],
  [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3],
  [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0],
  [0, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0],
  [2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2],
];
//でかマリオ
const data_11 = [
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 3, 0, 0, 0, 0, 0],
  [0, 0, 0, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0, 0, 0, 0],
  [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
  [0, 0, 0, 2, 2, 2, 3, 3, 2, 3, 3, 3, 0, 0, 0, 0],
  [0, 0, 2, 3, 3, 2, 3, 3, 2, 2, 3, 3, 3, 3, 0, 0],
  [0, 0, 2, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 0],
  [0, 2, 2, 3, 3, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 0],
  [0, 2, 2, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 0, 0],
  [0, 2, 2, 2, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 0, 0],
  [0, 0, 0, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0],
  [0, 0, 0, 0, 2, 3, 3, 3, 3, 3, 2, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 2, 1, 2, 2, 2, 2, 1, 2, 0, 0, 0, 0],
  [0, 0, 0, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0],
  [0, 0, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 0, 0],
  [0, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 0],
  [0, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 0],
  [2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2],
  [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2],
  [2, 2, 2, 2, 1, 3, 1, 1, 1, 1, 3, 1, 2, 2, 2, 2],
  [3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3],
  [3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3],
  [0, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 0],
  [0, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0],
  [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
  [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0],
  [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0],
  [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0],
  [0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0],
  [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0],
  [2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2],
  [2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2],
];
//死ぬマリオ
const deadmario_data=[
  [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 1, 0, 2, 2, 2, 2, 2, 2, 0, 1, 0, 0, 0],
  [0, 1, 1, 1, 3, 1, 3, 1, 1, 3, 1, 3, 1, 1, 1, 0],
  [0, 1, 1, 3, 3, 1, 3, 1, 1, 3, 1, 3, 3, 1, 1, 0],
  [0, 1, 1, 3, 3, 3, 1, 1, 1, 1, 3, 3, 3, 1, 1, 0],
  [0, 0, 0, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 0, 0, 0],
  [0, 0, 0, 0, 3, 1, 3, 3, 3, 3, 1, 3, 0, 0, 0, 0],
  [0, 0, 0, 0, 3, 1, 1, 1, 1, 1, 1, 3, 0, 0, 0, 0],
  [0, 0, 0, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 0, 0, 0],
  [0, 0, 3, 3, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 0, 0],
  [0, 0, 3, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3, 3, 0, 0],
  [0, 0, 3, 3, 3, 2, 1, 2, 2, 1, 2, 3, 3, 3, 0, 0],
  [0, 0, 3, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 0, 0],
  [0, 0, 0, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 0, 0, 0]
];
//コインのデータ
const data_12 = [
  [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
  [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
  [1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1],
  [1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1],
  [1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1],
  [1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1],
  [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2],
  [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2],
  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
  [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0],
];
//ノコノコのデータ
const nokonokodata=[ 
  [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 2, 3, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 2, 3, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 2, 3, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 2, 1, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [2, 2, 2, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [2, 3, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [2, 2, 2, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0],
  [2, 2, 2, 0, 2, 2, 0, 3, 2, 3, 3, 3, 2, 3, 0, 0],
  [2, 2, 0, 0, 2, 2, 0, 3, 3, 2, 3, 2, 3, 3, 3, 0],
  [2, 2, 0, 2, 2, 1, 3, 3, 3, 3, 2, 3, 1, 1, 3, 0],
  [0, 2, 0, 2, 2, 1, 3, 3, 3, 2, 3, 2, 3, 1, 3, 0],
  [0, 0, 0, 2, 2, 1, 2, 3, 2, 3, 3, 3, 2, 3, 2, 0],
  [0, 0, 2, 2, 1, 1, 3, 2, 3, 3, 3, 3, 3, 2, 3, 0],
  [0, 0, 0, 2, 1, 3, 2, 3, 2, 3, 3, 3, 2, 3, 2, 0],
  [0, 0, 0, 2, 1, 2, 3, 3, 3, 2, 3, 2, 3, 3, 3, 0],
  [0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 0],
  [0, 0, 0, 0, 1, 1, 3, 3, 3, 2, 3, 2, 3, 1, 1, 1],
  [0, 0, 0, 2, 2, 1, 1, 1, 2, 3, 3, 1, 1, 1, 0, 0],
  [0, 0, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 0],
  [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2]
];
//潰れたノコノコ(甲羅)
const c_nokonokodata=[ 
  [0, 0, 0, 0, 0, 2, 3, 3, 3, 3, 2, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 3, 3, 2, 3, 3, 3, 3, 3, 3, 0, 0, 0],
  [0, 0, 0, 3, 3, 2, 3, 2, 2, 2, 2, 3, 3, 0, 0, 0],
  [0, 0, 0, 3, 2, 3, 3, 3, 3, 3, 3, 2, 3, 0, 0, 0],
  [0, 0, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 0, 0],
  [0, 0, 2, 3, 2, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 0],
  [0, 2, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 2, 0],
  [0, 3, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3, 3, 0],
  [1, 1, 1, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 1, 1, 1],
  [1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 2, 1, 1, 1, 1],
  [0, 0, 0, 1, 1, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0, 0],
  [0, 0, 0, 0, 1, 1, 3, 3, 3, 3, 1, 1, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
];
//パタパタのデータ
const patapatadata=[ 
  [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
  [0, 0, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
  [0, 2, 3, 1, 1, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1],
  [0, 2, 3, 1, 1, 2, 2, 0, 0, 0, 1, 1, 1, 1, 1, 0],
  [0, 2, 3, 1, 1, 2, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0],
  [0, 2, 1, 1, 1, 2, 2, 0, 0, 1, 2, 1, 1, 1, 1, 0],
  [2, 2, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 1, 0],
  [2, 3, 2, 2, 2, 2, 2, 0, 1, 2, 1, 1, 1, 1, 0, 0],
  [2, 2, 2, 2, 2, 2, 0, 0, 1, 2, 1, 1, 1, 0, 1, 0],
  [2, 2, 2, 0, 2, 2, 0, 3, 1, 2, 1, 1, 1, 1, 1, 0],
  [2, 2, 0, 0, 2, 2, 0, 3, 3, 1, 2, 1, 1, 1, 3, 0],
  [2, 2, 0, 2, 2, 1, 3, 3, 3, 1, 1, 1, 3, 3, 3, 0],
  [0, 2, 0, 2, 2, 1, 3, 3, 3, 2, 3, 2, 3, 3, 3, 0],
  [0, 0, 0, 2, 2, 1, 2, 3, 2, 3, 3, 3, 2, 3, 2, 0],
  [0, 0, 2, 2, 1, 1, 3, 2, 3, 3, 3, 3, 3, 2, 3, 0],
  [0, 0, 0, 2, 1, 3, 2, 3, 2, 3, 3, 3, 2, 3, 2, 0],
  [0, 0, 0, 2, 1, 2, 3, 3, 3, 2, 3, 2, 3, 3, 3, 0],
  [0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 0],
  [0, 0, 0, 0, 1, 1, 3, 3, 3, 2, 3, 2, 3, 1, 1, 1],
  [0, 0, 0, 2, 2, 1, 1, 1, 2, 3, 3, 1, 1, 1, 0, 0],
  [0, 0, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 0],
  [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
];
const patapatadata_b=[ 
  [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 2, 2, 3, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 2, 2, 3, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 2, 2, 3, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 2, 2, 1, 1, 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0],
  [2, 3, 2, 2, 1, 2, 2, 0, 1, 1, 2, 1, 1, 0, 0, 0],
  [2, 2, 2, 2, 2, 2, 2, 0, 1, 2, 1, 1, 1, 1, 0, 0],
  [2, 2, 2, 0, 0, 2, 2, 0, 1, 2, 1, 1, 1, 1, 1, 0],
  [2, 2, 0, 0, 0, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 0],
  [0, 0, 0, 0, 2, 2, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1],
  [0, 0, 0, 2, 2, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 1],
  [0, 2, 2, 2, 2, 1, 3, 3, 3, 2, 3, 2, 3, 3, 1, 1],
  [0, 0, 2, 2, 2, 1, 2, 3, 2, 3, 3, 3, 2, 3, 2, 0],
  [0, 0, 0, 2, 1, 1, 3, 2, 3, 3, 3, 3, 3, 2, 3, 0],
  [0, 0, 0, 2, 1, 3, 2, 3, 2, 3, 3, 3, 2, 3, 2, 0],
  [0, 0, 0, 2, 1, 2, 3, 3, 3, 2, 3, 2, 3, 3, 3, 0],
  [0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 0],
  [0, 0, 0, 0, 1, 1, 3, 3, 3, 2, 3, 2, 3, 1, 1, 0],
  [0, 0, 0, 0, 2, 1, 1, 1, 2, 3, 3, 1, 1, 1, 2, 0],
  [0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 0],
  [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0],
  [0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0],
];

//setup
function setup(){
  createCanvas(windowWidth, windowHeight);
  x = width / 2;
  y = height / 2;
  vx = 8;
  vy = 8;
  mx = bs*7/3;
  my = height-ground;
  s_mario_size = bs;
  b_mario_size = 2 * bs;
  vy = 0;
  kx = bs*8;
  ky = height-ground-bs*4;
  vk = 0;
  kbx = width / 2;
  kby = height / 2; 
  dkx_1 = bs * 4;
  dky_1 = height-ground;
  dkx_2 = bs * 14;
  dky_2 = height-ground;
  dokan_size = bs * 4 / 2;

  vkbx = 8;
  vkby = 8;
  vpny = 4;

  // let kill=max(kill_kuribo,kill_nokonoko);
  let onblock=height-ground-bs*4;

  
  rx1=bs*8;
  ry1=onblock
  rx2=bs*10;
  ry2=onblock;
  rx3=bs*12;
  ry3=onblock
  sx1=bs*9;
  sy1=onblock;
  hx1=bs*11;
  hy1=onblock;
  mx=bs*7/3;
  my=height-ground;
  vy=0;
  kx=bs*11;
  ky=height-ground-bs*4;
  vk=0;
  nx=width;
  ny=height-ground;
  coin_size = 10/16 * bs;
  time_coin = 0
  cox1 = bs*17 + ps*3;
  coy1 = onblock - bs*5;
  cox2 = bs*18 + ps*3;
  coy2 = onblock - bs*5;
  cox3 = bs*19 + ps*3;
  coy3 = onblock - bs*5;
  cox4 = bs*23 + ps*3;
  coy4 = onblock + bs*0;
  cox5 = bs*17 + ps*3;
  coy5 = onblock - bs*0.5;
  coy6 = onblock - bs*0.5;
  coy7 = onblock - bs*0.5;
  pnx = bs*2;
  pny = height / 2;
}

//図形の関数
//地面
function rock(rx, ry){  
  noStroke();
  
  fill(217, 109, 2);
  square(rx, ry-ps, bs);
  
  fill(0);
  rect(rx+ps*9, ry-ps, ps, ps*10);
  rect(rx+ps*15, ry, ps, ps*4);
  rect(rx+ps*15, ry+ps*5, ps, ps*9);
  rect(rx+ps*11, ry+ps*3, ps, ps*2);
  rect(rx+ps*12, ry+ps*4, ps*3, ps);
  rect(rx, ry+ps*9, ps*2, ps);
  rect(rx+ps*8, ry+ps*9, ps, ps*2);
  rect(rx+ps*2, ry+ps*10, ps*2, ps);
  rect(rx+ps*4, ry+ps*11, ps*4, ps);
  rect(rx+ps*7, ry+ps*12, ps, ps*2);
  rect(rx+ps*15, ry+ps*13, ps, ps);
  rect(rx+ps, ry+ps*14, ps*6, ps);
  rect(rx+ps*9, ry+ps*14, ps*6, ps);
  
  fill(250, 201, 145);
  rect(rx+ps, ry-ps, ps*8, ps);
  rect(rx+ps*11, ry-ps, ps*4, ps);
  rect(rx, ry, ps, ps*9);
  rect(rx+ps*10, ry, ps, ps*4);
  rect(rx+ps*10, ry+ps*5, ps*5, ps);
  rect(rx+ps*10, ry+ps*6, ps, ps*3);
  rect(rx+ps*9, ry+ps*9, ps, ps*2);
  rect(rx, ry+ps*10, ps*2, ps);
  rect(rx, ry+ps*11, ps, ps*3);
  rect(rx+ps*2, ry+ps*11, ps*2, ps);
  rect(rx+ps*8, ry+ps*11, ps, ps*4);
  rect(rx+ps*4, ry+ps*12, ps*3, ps);
}
//マリオ
function mario(mx, my){
  const h_m1 = s_mario_size / data_10.length;
  for(let i = 0; i <  data_10.length; i++){
    const row = data_10[i];
    //const w = s_mario_size / row.length;
    for(let j =0; j <  row.length; j++){
        if(data_10[i][j] == 1){
          strokeWeight(0);
          fill(207, 53, 23);
        }
        else if(data_10[i][j] == 2){
          fill(87, 84, 43);
        }
        else if(data_10[i][j] == 3){
          fill(237, 175, 104);
        }
        else{
          noFill();
        }
    square(mx + j * h_m1 - s_mario_size / 2, my + i * h_m1 - s_mario_size - ps, h_m1);
    }
  }
}
//でかマリオ
function bigmario(bmx, bmy){
  const h_m2 = b_mario_size / data_11.length;
  for(let i = 0; i <  data_11.length; i++){
    const row = data_11[i];
    //const w = b_mario_size / row.length;
    for(let j =0; j <  row.length; j++){
        if(data_11[i][j] == 1){
          strokeWeight(0);
          fill(207, 53, 23);
        }
        else if(data_11[i][j] == 2){
          fill(87, 84, 43);
        }
        else if(data_11[i][j] == 3){
          fill(237, 175, 104);
        }
        else{
          noFill();
        }
    square(bmx + j * h_m2 - b_mario_size / 2, bmy + i * h_m2 - b_mario_size - ps, h_m2);
    }
  }
}
//死ぬマリオ
function deadmario(x, y){
  for(let i=0;i<14; i++){
    for(let j=0; j<16; j++){
      if(deadmario_data[i][j] == 0){
        noFill();
      }
      else if(deadmario_data[i][j] == 1){
        fill(245, 172, 108);
      }
      else if(deadmario_data[i][j] == 2){
        fill(230, 8, 0);
      }
      else if(deadmario_data[i][j] == 3){
        fill(143, 119, 0);
      }
      noStroke();
      square(x-ps*16+j*ps, y-ps*14+i*ps, ps);
    }
  }
}
//クリボー
function kuribo(kbx, kby){
  kuribo_size = bs;
  const h_kb1 = kuribo_size / data_6.length;
  for(let i = 0; i <  data_6.length; i++){
    const row = data_6[i];
    const w = kuribo_size / row.length;
    for(let j =0; j <  row.length; j++){
        if(data_6[i][j] == 1){
          strokeWeight(0);
          fill(0);
          rect(kbx + i * w, kby + j * h_kb1, w, h_kb1);
        }
        else if(data_6[i][j] == 2){
          fill(168, 84, 0);
          rect(kbx + i * w, kby + j * h_kb1, w, h_kb1);
        }
        else if(data_6[i][j] == 3){
          fill(250, 201, 145);
          rect(kbx + i * w, kby + j * h_kb1, w, h_kb1);
        }
        else{
          noFill();
          rect(kbx + i * w, kby + j * h_kb1, w, h_kb1);
        }
    }
  }
}
//クリボー歩行
function kuribo_b(kbx, kby){
  kuribo_size = bs;
  const h_kb1 = kuribo_size / data_6_b.length;
  for(let i = 0; i <  data_6_b.length; i++){
    const row = data_6_b[i];
    const w = kuribo_size / row.length;
    for(let j =0; j <  row.length; j++){
        if(data_6_b[i][j] == 1){
          strokeWeight(0);
          fill(0);
        }
        else if(data_6_b[i][j] == 2){
          fill(168, 84, 0);
        }
        else if(data_6_b[i][j] == 3){
          fill(250, 201, 145);
        }
        else{
          noFill();
        }
        rect(kbx + i * w, kby + j * h_kb1, w, h_kb1);
    }
  }
}
//潰れたクリボー
function kuribo2(kbx, kby){
  kuribo_size = bs;
  const h_kb2 = kuribo_size / data_6.length/3;
  for(let i = 0; i <  data_6.length; i++){
    const row = data_6[i];
    const w = kuribo_size / row.length;
    for(let j =0; j <  row.length; j++){
        if(data_6[i][j] == 1){
          strokeWeight(0);
          fill(0);
          rect(kbx + i * w, kby + ps*11+ j * h_kb2, w, h_kb2);
        }
        else if(data_6[i][j] == 2){
          fill(168, 84, 0);
          rect(kbx + i * w, kby + ps*11+ j * h_kb2, w, h_kb2);
        }
        else if(data_6[i][j] == 3){
          fill(250, 201, 145);
          rect(kbx + i * w, kby + ps*11+ j * h_kb2, w, h_kb2);
        }
        else{
          noFill();
          rect(kbx + i * w, kby + ps*11+ j * h_kb2, w, h_kb2);
        }
    }
  }
}
//ツタ
function tsuta(tbx, tby){
  tsuta_size = bs;
  const h_t1 = tsuta_size / data_7.length;
  for(let i = 0; i <  data_7.length; i++){
    const row = data_7[i];
    const w = (72 / 14) * tsuta_size / row.length;
    for(let j =0; j <  row.length; j++){
        if(data_7[i][j] == 2){
          strokeWeight(0);
          fill(2, 156, 30);
          rect(tbx + i * w, tby + j * h_t1, w, h_t1);
        }
        else if(data_7[i][j] == 3){
          fill(247, 169, 67);
          rect(tbx + i * w, tby + j * h_t1, w, h_t1);
        }
        else{
          noFill();
          rect(tbx + i * w, tby + j * h_t1, w, h_t1);
        }
    }
  }
}
//キノコ
function kinoko(kx, ky){
  ps = 3.3;
  fill(247, 169, 67);//黄
  rect(kx+ps*6, ky-ps*16, ps*4, ps);
  rect(kx+ps*5, ky-ps*15, ps*6,ps);
  rect(kx+ps*4, ky-ps*14, ps*8, ps);
  rect(kx+ps*3, ky-ps*13, ps*10, ps);
  rect(kx+ps*2,ky-ps*12, ps*12, ps);
  rect(kx+ps, ky-ps*11, ps*14, ps*2);
  rect(kx, ky-ps*9, ps*16, ps*4);
  rect(kx+ps, ky-ps*5, ps*14, ps);
  
  fill(255);
  rect(kx+ps*4, ky-ps*5, ps*8, ps*4);
  rect(kx+ps*5, ky-ps, ps*6, ps);
  
  fill(247, 169, 67);//黄
  rect(kx+ps*10, ky-ps*3, ps, ps*2);
  rect(kx+ps*9, ky-ps, ps, ps);
  
  fill(230, 8, 0);//赤
  rect(kx+ps*9, ky-ps*15, ps*2, ps);
  rect(kx+ps*8, ky-ps*14, ps*4, ps);
  rect(kx+ps*8, ky-ps*13, ps*5, ps);
  rect(kx+ps*9, ky-ps*12, ps*3, ps);
  rect(kx+ps*3, ky-ps*11, ps*3, ps);
  rect(kx+ps*2, ky-ps*10, ps*5, ps*3);
  rect(kx+ps*3, ky-ps*7, ps*3, ps);
  rect(kx+ps*12, ky-ps*9, ps*2, ps);
  rect(kx+ps*12, ky-ps*8, ps*3, ps);
  rect(kx+ps*13, ky-ps*7, ps*2, ps);
  rect(kx+ps*2, ky-ps*5, ps*3, ps);
  rect(kx+ps*11, ky-ps*5, ps*3, ps); 
}
//レンガ
function renga(bx, by){//brick
  noStroke();
  
  fill(168, 84, 0);
  square(bx, by-ps, bs);
  
  fill(250, 201, 145);
  rect(bx, by-ps, bs, ps);
  
  fill(0);
  rect(bx+ps*7, by, ps, ps*2);
  rect(bx+ps*15, by, ps, ps*2);
  rect(bx, by+ps*2, bs, ps);
  rect(bx+ps*3, by+ps*3, ps, ps*3);
  rect(bx+ps*11, by+ps*3, ps, ps*3);
  rect(bx, by+ps*6, bs, ps);
  rect(bx+ps*7, by+ps*7, ps, ps*3);
  rect(bx+ps*15, by+ps*7, ps, ps*3);
  rect(bx, by+ps*10, bs, ps);
  rect(bx+ps*3, by+ps*11, ps, ps*3);
  rect(bx+ps*11, by+ps*11, ps, ps*3);
  rect(bx, by+ps*14, bs, ps);
}
//レンガ(後)
function solid(sx, sy){
  noStroke();
  
  fill(168, 84, 0);
  square(sx+ps, sy, ps*14);
  
  fill(0);
  rect(sx+ps, sy-ps, ps*14, ps);
  rect(sx, sy, ps, ps*14);
  rect(sx+ps*15, sy, ps, ps*14);
  rect(sx+ps, sy+ps*14, ps*14, ps);
  square(sx+ps*2, sy+ps, ps);
  square(sx+ps*13, sy+ps, ps);
  square(sx+ps*2, sy+ps*12, ps);
  square(sx+ps*13, sy+ps*12, ps);
}
//はてなボックス
function hatena(hx, hy){
  noStroke();
  
  fill(247, 169, 67);//黄
  square(hx+ps,hy, ps*14);
  
  fill(0);//黒
  rect(hx+ps*15, hy, ps, ps*14);
  square(hx+ps*2, hy+ps, ps);
  square(hx+ps*13 ,hy+ps, ps);
  square(hx+ps*2, hy+ps*12, ps);
  square(hx+ps*13, hy+ps*12, ps);
  rect(hx, hy+ps*14, ps*16, ps);
  rect(hx+ps*6, hy+ps*3, ps*3, ps);
  rect(hx+ps*5, hy+ps*4, ps*2, ps*3);
  rect(hx+ps*9, hy+ps*4, ps*3, ps*4);
  rect(hx+ps*8, hy+ps*8, ps*2, ps*2);
  rect(hx+ps*8, hy+ps*11, ps*2, ps*2);
  
  fill(217, 109, 2);//茶
  rect(hx+ps, hy-ps, ps*14, ps);
  rect(hx, hy, ps, ps*14);
  rect(hx+ps*5, hy+ps*2, ps*5, ps);
  rect(hx+ps*4, hy+ps*3, ps*2, ps*3);
  rect(hx+ps*9, hy+ps*3, ps*2, ps*3);
  rect(hx+ps*8, hy+ps*6, ps*3, ps)
  rect(hx+ps*7, hy+ps*7, ps*2, ps*2);
  rect(hx+ps*7, hy+ps*10, ps*2, ps*2);
}
//ノコノコ
function nokonoko(nx, ny){
  for(let ni = 0; ni < 23; ni++){
    const nokonokorow = nokonokodata[ni]
    for(let nj = 0; nj < 16; nj++){
            if(nokonokodata[ni][nj] == 0){
              noFill();
            }
      else if(nokonokodata[ni][nj] == 1){
              fill(255);
      }
      else if(nokonokodata[ni][nj] == 2){
              fill(245, 172, 108);
      }
      else if(nokonokodata[ni][nj] == 3){
              fill(38, 191, 43);
      }
            noStroke();
            square(nx+nj*ps, ny-ps*24+ni*ps, ps); 
      }
    }
}
//潰れたノコノコ(甲羅)
function c_nokonoko(cnx, cny){
  for(let ni = 0; ni < c_nokonokodata.length; ni++){
    const nokonokorow = c_nokonokodata[ni]
    for(let nj = 0; nj < nokonokorow.length; nj++){
            if(c_nokonokodata[ni][nj] == 0){
              noFill();
            }
      else if(c_nokonokodata[ni][nj] == 1){
              fill(255);
      }
      else if(c_nokonokodata[ni][nj] == 2){
              fill(245, 172, 108);
      }
      else if(c_nokonokodata[ni][nj] == 3){
              fill(38, 191, 43);
      }
            noStroke();
            square(cnx+nj*ps, cny-ps*(c_nokonokodata.length+1)+ni*ps, ps); 
      }
    }
}
//パタパタ
function patapata(pnx, pny){
  for(let ni = 0; ni < patapatadata.length; ni++){
    const patapatarow = patapatadata[ni]
    for(let nj = 0; nj < patapatarow.length; nj++){
            if(patapatadata[ni][nj] == 0){
              noFill();
            }
      else if(patapatadata[ni][nj] == 1){
              fill(255);
      }
      else if(patapatadata[ni][nj] == 2){
              fill(245, 172, 108);
      }
      else if(patapatadata[ni][nj] == 3){
              fill(38, 191, 43);
      }
            noStroke();
            square(pnx + nj*ps, pny-ps*23+ni*ps, ps); 
      }
    }
}
function patapata_b(pnx, pny){
  for(let ni = 0; ni < patapatadata_b.length; ni++){
    const patapatarow = patapatadata_b[ni]
    for(let nj = 0; nj < patapatarow.length; nj++){
            if(patapatadata_b[ni][nj] == 0){
              noFill();
            }
      else if(patapatadata_b[ni][nj] == 1){
              fill(255);
      }
      else if(patapatadata_b[ni][nj] == 2){
              fill(245, 172, 108);
      }
      else if(patapatadata_b[ni][nj] == 3){
              fill(38, 191, 43);
      }
            noStroke();
            square(pnx + nj*ps, pny-ps*23+ni*ps, ps); 
      }
    }
}
//土管1
function dokan_1(dkx_1, dky_1){
  const h_d1 = dokan_size / data_1.length;
  for(let i = 0; i <  data_1.length; i++){
    const row = data_1[i];
    const w = dokan_size / row.length;
    for(let j =0; j <  row.length; j++){
        if(data_1[i][j] == 1){
          strokeWeight(0);
          fill(0);
        }
        else if(data_1[i][j] == 2){
          fill(145, 219, 18);
        }
        else if(data_1[i][j] == 3){
          fill(2, 156, 30);
        }
        else{
          noFill();
        }
      rect(dkx_1 + i * w, dky_1 - dokan_size - ps + j * h_d1, w, h_d1);
    }
  }
}
//土管2
function dokan_2(dkx_2, dky_2){
  const h_d2 = dokan_size / data_2.length;
  for(let i = 0; i <  data_2.length; i++){
    const row = data_2[i];
    const w = 2 * dokan_size / row.length;
    for(let j =0; j <  row.length; j++){
        if(data_2[i][j] == 1){
          strokeWeight(0);
          fill(0);
        }
        else if(data_2[i][j] == 2){
          fill(145, 219, 18);
        }
        else if(data_2[i][j] == 3){
          fill(2, 156, 30);
        }
        else{
          noFill();
        }
      rect(dkx_2 + i * w, dky_2 - bs * 4 - ps + j * h_d2, w, h_d2);
    }
  }
}
//コイン
function coin(cox, coy){
  const h_co = coin_size / data_12.length;
  for(let i = 0; i <  data_12.length; i++){
    const row = data_12[i];
    for(let j = 0; j <  row.length; j++){
        if(data_12[i][j] == 1){
          strokeWeight(0);
          fill(247, 169, 67);
        }
        else if(data_12[i][j] == 2){
          fill(0);
        }
        else if(data_12[i][j] == 3){
          fill(143, 73, 7);
        }
        else{
          noFill();
        }
    square(cox + i * h_co, coy + j * h_co - coin_size * 14/10 - ps, h_co);
    }
  }
}
function coin_b(cox, coy){
  const h_co = coin_size / data_12.length;
  for(let i = 0; i <  data_12.length; i++){
    const row = data_12[i];
    for(let j = 0; j <  row.length; j++){
        if(data_12[i][j] == 1){
          strokeWeight(0);
          fill(143, 73, 7);
        }
        else if(data_12[i][j] == 2){
          fill(0);
        }
        else if(data_12[i][j] == 3){
          fill(247, 169, 67);
        }
        else{
          noFill();
        }
    square(cox + i * h_co, coy + j * h_co - coin_size * 14/10 - ps, h_co);
    }
  }
}

function draw(){
  background(160, 192, 255);

  let gy = height - ground;
  strokeWeight(1);
  line(0, gy, width, gy);
  let onblock=height-ground-bs*4;
  let block_1=height-ground-bs*7;
  let block_2=height-ground-bs*9;
  hit_coin = hit_b + hit_c1 + hit_c2 + hit_c3 + hit_c4;
  
  //草1
  grass_size = 110;
  const h_g1 = grass_size / data_8.length;
  for(let i = 0; i <  data_8.length; i++){
    const row = data_8[i];
    const w = (17 / 32)  * grass_size / row.length;
    for(let j =0; j <  row.length; j++){
        if(data_8[i][j] == 1){
          strokeWeight(0);
          fill(0);
          rect(bs * 1 + i * w, gy - bs - ps * 3 + j * h_g1, w, h_g1);
        }
        else if(data_8[i][j] == 2){
          fill(145, 219, 18);
          rect(bs * 1 + i * w, gy - bs - ps * 3 + j * h_g1, w, h_g1);
        }
        else if(data_8[i][j] == 3){
          fill(2, 156, 30);
          rect(bs * 1 + i * w, gy - bs - ps * 3 + j * h_g1, w, h_g1);
        }
        else{
          noFill();
          rect(bs * 1 + i * w, gy - bs - ps * 3 + j * h_g1, w, h_g1);
        }
    }
  }
  
  //草3
  grass_size = 110 * 2;
  const h_g3 = grass_size / data_9.length;
  for(let i = 0; i <  data_9.length; i++){
    const row = data_9[i];
    const w = (17 / 64)  * grass_size / row.length;
    for(let j =0; j <  row.length; j++){
        if(data_9[i][j] == 1){
          strokeWeight(0);
          fill(0);
          rect(bs * 16.5 + i * w, gy - bs - ps * 3 + j * h_g3, w, h_g3);
        }
        else if(data_9[i][j] == 2){
          fill(145, 219, 18);
          rect(bs * 16.5 + i * w, gy - bs - ps * 3 + j * h_g3, w, h_g3);
        }
        else if(data_9[i][j] == 3){
          fill(2, 156, 30);
          rect(bs * 16.5 + i * w, gy - bs - ps * 3 + j * h_g3, w, h_g3);
        }
        else{
          noFill();
          rect(bs * 16.5 + i * w, gy - bs - ps * 3 + j * h_g3, w, h_g3);
        }
    }
  }

  //地面
  for(let i=0; i<width; i+=bs){
    for(let j=gy; j<height; j+=bs){
      rock(i, j);
    }
  }
  
  //雲1
  cloud_size = 110;
  const h_c1 = cloud_size / data_3.length;
  for(let i = 0; i <  data_3.length; i++){
    const row = data_3[i];
    const w = (26 / 32) * cloud_size / row.length;
    for(let j =0; j <  row.length; j++){
        if(data_3[i][j] == 1){
          noStroke();
          fill(0);
          rect(850 + i * w, 50 + j * h_c1, w, h_c1);
        }
        else if(data_3[i][j] == 2){
          fill(255);
          rect(850 + i * w, 50 + j * h_c1, w, h_c1);
        }
        else if(data_3[i][j] == 3){
          fill(108, 200, 240);
          rect(850 + i * w, 50 + j * h_c1, w, h_c1);
        }
        else{
          noFill();
          rect(850 + i * w, 50 + j * h_c1, w, h_c1);
        }
    }
  }

  //雲2
  cloud_size = (48 / 32) * 105;
  const h_c2 = cloud_size / data_4.length;
  for(let i = 0; i <  data_4.length; i++){
    const row = data_4[i];
    const w = (26 / 48) * cloud_size / row.length;
    for(let j =0; j <  row.length; j++){
        if(data_4[i][j] == 1){
          strokeWeight(0);
          fill(0);
          rect(450 + i * w, 90 + j * h_c2, w, h_c2);
        }
        else if(data_4[i][j] == 2){
          fill(255);
          rect(450 + i * w, 90 + j * h_c2, w, h_c2);
        }
        else if(data_4[i][j] == 3){
          fill(108, 200, 240);
          rect(450 + i * w, 90 + j * h_c2, w, h_c2);
        }
        else{
          noFill();
          rect(450 + i * w, 90 + j * h_c2, w, h_c2);
        }
      
    }
  }

  //雲3-1
  cloud_size = (64 / 32) * 105;
  const h_c3 = cloud_size / data_5.length;
  for(let i = 0; i <  data_5.length; i++){
    const row = data_5[i];
    const w = (26 / 64) * cloud_size / row.length;
    for(let j =0; j <  row.length; j++){
        if(data_5[i][j] == 1){
          strokeWeight(0);
          fill(0);
          rect(30 + i * w, 110 + j * h_c3, w, h_c3);
        }
        else if(data_5[i][j] == 2){
          fill(255);
          rect(30 + i * w, 110 + j * h_c3, w, h_c3);
        }
        else if(data_5[i][j] == 3){
          fill(108, 200, 240);
          rect(30 + i * w, 110 + j * h_c3, w, h_c3);
        }
        else{
          noFill();
          rect(30 + i * w, 110 + j * h_c3, w, h_c3);
        }
      
    }
  }

  //雲3-2
  cloud_size = (64 / 32) * 105;
  const h_c4 = cloud_size / data_5.length;
  for(let i = 0; i <  data_5.length; i++){
    const row = data_5[i];
    const w = (26 / 64) * cloud_size / row.length;
    for(let j =0; j <  row.length; j++){
        if(data_5[i][j] == 1){
          strokeWeight(0);
          fill(0);
          rect(1090 + i * w, 140 + j * h_c4, w, h_c4);
        }
        else if(data_5[i][j] == 2){
          fill(255);
          rect(1090 + i * w, 140 + j * h_c4, w, h_c4);
        }
        else if(data_5[i][j] == 3){
          fill(108, 200, 240);
          rect(1090 + i * w, 140 + j * h_c4, w, h_c4);
        }
        else{
          noFill();
          rect(1090 + i * w, 140 + j * h_c4, w, h_c4);
        }
      
    }
  }
  
  // hatena(bs* (8 + 3), onblock);
  // renga(bs* (5 + 3), onblock);
  // renga(bs* (7 + 3), onblock);
  // renga(bs* (9 + 3), onblock);
  // solid(bs* (6 + 3), onblock);

  renga(rx1, ry1);
  renga(rx2, ry2);
  renga(rx3, ry3);
  solid(sx1, sy1);

  tsuta(bs * 6, onblock - bs * (3 + 72 / 14) );
  renga(bs * 4, onblock - bs * 3);
  renga(bs * 5, onblock - bs * 3);
  solid(bs * 6, onblock - bs * 3);
  renga(bs * 7, onblock - bs * 3);

  renga(bs * 17, onblock - bs * 5);
  renga(bs * 18, onblock - bs * 5);
  renga(bs * 19, onblock - bs * 5);
  renga(bs * 23, gy - bs * 4);


  //土管1･2
  dokan_1(dkx_1, dky_1);
  dokan_2(dkx_2, dky_2);

  //初期のみ？ブロック設定＋キノコの動き
  fill(100, 141, 245);
  rect(hx1, hy1);
  solid(hx1, hy1);
  if(hit==0){hatena(hx1, hy1);}
  if(hit>0){
    kinoko(kx, ky);
    ky+=2;
    // height-ground-bs*4
    kx+=2;
    if(kx>bs*13){
      vk+=gk;
      if(ky>height-ground){
        ky=height-ground;
        vk=0;
      }
    }
  }
  //ブロックたたいてコイン
  if(dist(mx-ps*6, my-bs, bs * 17+ps*8, onblock)<ps*8*2 && my>onblock){hit_b+=1;}
  if(hit_b == 0){renga(bs * 17, gy - bs * 4);}
  if(hit_b > 0){
    if(hit_b == 1){
      coy5 += 15;
      coin(cox5, coy5);
      coy5 = constrain(coy5,0, onblock + bs - ps * 5);
      renga(bs * 17, gy - bs * 4);
    }
    else if(hit_b == 2){
      coy6 += 15;
      coin(cox5, coy6);
      coy6 = constrain(coy6,0, onblock + bs - ps * 5);
      renga(bs * 17, gy - bs * 4);
    }
    else if(hit_b == 3){
      coy7 += 15;
      coin(cox5, coy7);
      coy7 = constrain(coy7,0, onblock + bs - ps * 5);
      solid(bs * 17, gy - bs * 4);
    }
    else{
      solid(bs * 17, gy - bs * 4);
    }
  }
  hit_b = constrain(hit_b, 0, 3);
  //コイン1･2･3･4
  time_coin += 1;
  //触れてコイン
  if(dist(mx-ps*6, my-bs, bs * 17+ps*8, coy1 - bs)<ps*8*2){hit_c1 = 1;}
  if(hit_c1 == 1){
    coy1 += 15;
    coin(cox1, coy1);
    coy1 = constrain(coy1, 0, onblock - bs * 4 - ps * 5);
    renga(bs * 17, onblock - bs * 5);
  }
  if(hit_c1 == 0){
    if (time_coin % 8 == 0 || time_coin % 8 == 1 || time_coin % 8 == 2 || time_coin % 8 == 3){coin(cox1, coy1);}
    else {coin_b(cox1, coy1);}
  }

  if(dist(mx-ps*6, my-bs, bs * 18+ps*8, coy2 - bs)<ps*8*2){hit_c2 = 1;}
  if(hit_c2 == 1){
    coy2 += 15;
    coin(cox2, coy2);
    coy2 = constrain(coy2, 0, onblock - bs * 4 - ps * 5);
    renga(bs * 18, onblock - bs * 5);
  }
  if(hit_c2 == 0){
    if (time_coin % 8 == 0 || time_coin % 8 == 1 || time_coin % 8 == 2 || time_coin % 8 == 3){coin(cox2, coy2);}
    else {coin_b(cox2, coy2);}
  }

  if(dist(mx-ps*6, my-bs, bs * 19+ps*8, coy3 - bs)<ps*8*2){hit_c3 = 1;}
  if(hit_c3 == 1){
    coy3 += 15;
    coin(cox3, coy3);
    coy3 = constrain(coy3, 0, onblock - bs * 4 - ps * 5);
    renga(bs * 19, onblock - bs * 5);
  }
  if(hit_c3 == 0){
    if (time_coin % 8 == 0 || time_coin % 8 == 1 || time_coin % 8 == 2 || time_coin % 8 == 3){coin(cox3, coy3);}
    else {coin_b(cox3, coy3);}
  }

  if(dist(mx-ps*6, my-bs, bs * 23+ps*8, coy4 - bs)<ps*8*2){hit_c4 = 1;}
  if(hit_c4 == 1){
    coy4 += 15;
    coin(cox4, coy4);
    coy4 = constrain(coy4, gy - bs * 4, gy - bs * 3 - ps * 5);
    renga(bs * 23, gy - bs * 4);
  }
  if(hit_c4 == 0){
    if (time_coin % 8 == 0 || time_coin % 8 == 1 || time_coin % 8 == 2 || time_coin % 8 == 3){coin(cox4, coy4);}
    else {coin_b(cox4, coy4);}
  }
  hit_c1 = constrain(hit_c1, 0, 1);
  hit_c2 = constrain(hit_c2, 0, 1);
  hit_c3 = constrain(hit_c3, 0, 1);
  hit_c4 = constrain(hit_c4, 0, 1);

  //パタパタ
  pny += vpny;
  pnx = bs*2 ;
  if (((pny - (height / 2)) / 4) % 4 == 0 || ((pny - (height / 2)) / 4) % 4 == 1){patapata(pnx, pny);}
  else{patapata_b(pnx, pny);}
  if(pny < gy - bs*7 || pny > gy - bs*2){vpny = -1 * vpny;}
  pnx = constrain(pnx, 0, width);
  pny = constrain(pny, 0, height);
  
  //マリオorビッグマリオ
  if(big==0){
    if(time_m>30){mario(mx, my);}
    if(time_m<30&&time_m%5==1){mario(mx,my);}
  }
  if(my>height-ground){
    my=height-ground;
    constrain(my,0,height-ground);
  }
  if(big>0){bigmario(mx, my);}
  if(my>height-ground){
    my=height-ground;
    constrain(my,0,height-ground);
  }
  my+=vy;
  if(my<height-ground){vy+=g;}
  else{vy=0;}

  
  //クリボー
  if(kill_kuribo==0){
    if((kbx - width / 2) % 16 == 0){kuribo(kbx, kby);}
    if((kbx - width / 2) % 16!=0){kuribo_b(kbx, kby);}
    kbx += vkbx;
    kby = gy - bs - ps;
    if(kbx < 310 || kbx > 700){ vkbx = -1 * vkbx; }
    kbx = constrain(kbx, 0, width);
    kby = constrain(kby, 0, height);
  }
  if(kill_kuribo>0){
    time_k+=1;
    if(time_k<30){
      kuribo2(kbx,kby);
    }
    if(time_k>70){
      kill_kuribo=0;
      kbx=width/2;
      kby=gy - bs - ps;
      time_k=0;
    }
  }

  //ノコノコ　甲羅作ってくれたら踏んで転がすは出来そう　下のコメントのプログラム
  let koura_humi=0;
  if(nx<0){nx=width;}
  if(kill_nokonoko==0){
    nokonoko(nx, ny);
    nx-=0.8;
  }
  if(kill_nokonoko>0){//仮の倒した動きを書いといた
    time_n+=1;
    if(time_n<8){
      nokonoko(nx, ny);
    }
    if(time_n>40){
      kill_nokonoko=0;
      nx=width;
      ny=height-ground;
      time_n=0;
    }
  }
  if(kill_nokonoko>0){
    c_nokonoko(nx, ny);
    time_n+=1;
    if(koura_humi>0){nx-=10;}
    if(koura_humi==0&&time_n>300){
     kill_nokonoko=0;
     time_n=0;
    }
  }

  strokeWeight(1);
  
  
  //ブロックの上に乗る、ブロックに当たると跳ね返る
  if(mx>bs*(5 + 3)-ps*1&& mx<bs*(10 + 3)+ps*2){
    if(my>onblock-bs && my<=onblock){
      vy=0;
      my=onblock;
      constrain(my,0,onblock);
    }
    if(my>=onblock+bs && my<onblock+bs*2){
      if(vy<0){
        vy=-0.3*vy;
      }
    }
  }
  if(mx>bs*(4)-ps*1&& mx<bs*(8)+ps*2){
    if(my>block_1-bs && my<=block_1){
      vy=0;
      my=block_1;
      constrain(my,0,block_1);
    }
    if(my>=block_1+bs && my<block_1+bs*2){
      if(vy<0){
        vy=-0.3*vy;
      }
    }
  }
  if(mx>bs*17-ps*1&& mx<bs*19+ps*2){
    if(my>block_2-bs && my<=block_2){
      vy=0;
      my=block_2;
      constrain(my,0,block_2);
    }
    if(my>=block_2+bs && my<block_2+bs*2){
      if(vy<0){
        vy=-0.3*vy;
      }
    }
  }
  if((mx>bs*17-ps*1&& mx<bs*18+ps*2) || (mx>bs*23-ps*1&& mx<bs*24+ps*2)){
    if(my>onblock-bs && my<=onblock){
      vy=0;
      my=onblock;
      constrain(my,0,onblock);
    }
    if(my>=onblock+bs && my<onblock+bs*2){
      if(vy<0){
        vy=-0.3*vy;
      }
    }
  }
  

  
  //左右の運動
  if(keyIsDown(LEFT_ARROW)){mx-=8;}
  if(keyIsDown(RIGHT_ARROW)){mx+=8;}
  
  //？ブロック判定　hitでキノコ出現
  if(dist(mx-ps*6, my-bs, hx1+ps*8, onblock)<ps*8*2.2&&my>onblock){hit+=1;}
  ky+=vk

  //キノコの当たり判定　
  if(dist(mx-ps*6, my-ps*8, kx+ps*8,ky-ps*8)<bs&&hit>0){
      big+=1;
      hit=-100;
  }

  //クリボー,ノコノコの当たり判定(マリオ勝ち)
  if(dist(mx-ps*6, my-ps*8, kbx+ps*8,kby+ps*8)<bs&&my<height-ground){kill_kuribo+=1;}
  if(dist(mx-ps*6, my-ps*8, nx+ps*8,ny-ps*12)<bs&&my<height-ground){kill_nokonoko+=1;}
  if(dist(mx-ps*6, my-ps*8, nx+ps*8,ny-ps*12)<bs&&my<height-ground&&kill_nokonoko>0){koura_humi+=1;}
  kill=max(kill_kuribo,kill_nokonoko);
  //ノコノコ,クリボーの当たり判定(マリオ負け)
  if(dist(mx-ps*6, my-ps*8, nx+ps*8,ny-ps*0)<bs||dist(mx-ps*6, my-ps*8, kbx+ps*8,kby+ps*8)<bs&&kill==0){
    if(big>0){
      big=0;
      time_m=0;
    }//bigから通常に
    else if(big==0&&time_m>30){  
      // vy=-1*jump;
      big+=-1;
    }
  }

//クリア画面
  if(hit_coin == 7){
    background(160, 192, 255);
    strokeWeight(1);
    line(0, gy, width, gy);
    //草1
    grass_size = 110;
    const h_g1 = grass_size / data_8.length;
    for(let i = 0; i <  data_8.length; i++){
      const row = data_8[i];
      const w = (17 / 32)  * grass_size / row.length;
      for(let j =0; j <  row.length; j++){
          if(data_8[i][j] == 1){
            strokeWeight(0);
            fill(0);
            rect(bs * 1 + i * w, gy - bs - ps * 3 + j * h_g1, w, h_g1);
          }
          else if(data_8[i][j] == 2){
            fill(145, 219, 18);
            rect(bs * 1 + i * w, gy - bs - ps * 3 + j * h_g1, w, h_g1);
          }
          else if(data_8[i][j] == 3){
            fill(2, 156, 30);
            rect(bs * 1 + i * w, gy - bs - ps * 3 + j * h_g1, w, h_g1);
          }
          else{
            noFill();
            rect(bs * 1 + i * w, gy - bs - ps * 3 + j * h_g1, w, h_g1);
          }
      }
    }
    
    //草3
    grass_size = 110 * 2;
    const h_g3 = grass_size / data_9.length;
    for(let i = 0; i <  data_9.length; i++){
      const row = data_9[i];
      const w = (17 / 64)  * grass_size / row.length;
      for(let j =0; j <  row.length; j++){
          if(data_9[i][j] == 1){
            strokeWeight(0);
            fill(0);
            rect(bs * 16.5 + i * w, gy - bs - ps * 3 + j * h_g3, w, h_g3);
          }
          else if(data_9[i][j] == 2){
            fill(145, 219, 18);
            rect(bs * 16.5 + i * w, gy - bs - ps * 3 + j * h_g3, w, h_g3);
          }
          else if(data_9[i][j] == 3){
            fill(2, 156, 30);
            rect(bs * 16.5 + i * w, gy - bs - ps * 3 + j * h_g3, w, h_g3);
          }
          else{
            noFill();
            rect(bs * 16.5 + i * w, gy - bs - ps * 3 + j * h_g3, w, h_g3);
          }
      }
    }

    //地面
    for(let i=0; i<width; i+=bs){
      for(let j=gy; j<height; j+=bs){
        rock(i, j);
      }
    }
    
    //雲1
    cloud_size = 110;
    const h_c1 = cloud_size / data_3.length;
    for(let i = 0; i <  data_3.length; i++){
      const row = data_3[i];
      const w = (26 / 32) * cloud_size / row.length;
      for(let j =0; j <  row.length; j++){
          if(data_3[i][j] == 1){
            noStroke();
            fill(0);
            rect(850 + i * w, 50 + j * h_c1, w, h_c1);
          }
          else if(data_3[i][j] == 2){
            fill(255);
            rect(850 + i * w, 50 + j * h_c1, w, h_c1);
          }
          else if(data_3[i][j] == 3){
            fill(108, 200, 240);
            rect(850 + i * w, 50 + j * h_c1, w, h_c1);
          }
          else{
            noFill();
            rect(850 + i * w, 50 + j * h_c1, w, h_c1);
          }
      }
    }

    //雲2
    cloud_size = (48 / 32) * 105;
    const h_c2 = cloud_size / data_4.length;
    for(let i = 0; i <  data_4.length; i++){
      const row = data_4[i];
      const w = (26 / 48) * cloud_size / row.length;
      for(let j =0; j <  row.length; j++){
          if(data_4[i][j] == 1){
            strokeWeight(0);
            fill(0);
            rect(450 + i * w, 90 + j * h_c2, w, h_c2);
          }
          else if(data_4[i][j] == 2){
            fill(255);
            rect(450 + i * w, 90 + j * h_c2, w, h_c2);
          }
          else if(data_4[i][j] == 3){
            fill(108, 200, 240);
            rect(450 + i * w, 90 + j * h_c2, w, h_c2);
          }
          else{
            noFill();
            rect(450 + i * w, 90 + j * h_c2, w, h_c2);
          }
        
      }
    }

    //雲3-1
    cloud_size = (64 / 32) * 105;
    const h_c3 = cloud_size / data_5.length;
    for(let i = 0; i <  data_5.length; i++){
      const row = data_5[i];
      const w = (26 / 64) * cloud_size / row.length;
      for(let j =0; j <  row.length; j++){
          if(data_5[i][j] == 1){
            strokeWeight(0);
            fill(0);
            rect(30 + i * w, 110 + j * h_c3, w, h_c3);
          }
          else if(data_5[i][j] == 2){
            fill(255);
            rect(30 + i * w, 110 + j * h_c3, w, h_c3);
          }
          else if(data_5[i][j] == 3){
            fill(108, 200, 240);
            rect(30 + i * w, 110 + j * h_c3, w, h_c3);
          }
          else{
            noFill();
            rect(30 + i * w, 110 + j * h_c3, w, h_c3);
          }
        
      }
    }

    //雲3-2
    cloud_size = (64 / 32) * 105;
    const h_c4 = cloud_size / data_5.length;
    for(let i = 0; i <  data_5.length; i++){
      const row = data_5[i];
      const w = (26 / 64) * cloud_size / row.length;
      for(let j =0; j <  row.length; j++){
          if(data_5[i][j] == 1){
            strokeWeight(0);
            fill(0);
            rect(1090 + i * w, 140 + j * h_c4, w, h_c4);
          }
          else if(data_5[i][j] == 2){
            fill(255);
            rect(1090 + i * w, 140 + j * h_c4, w, h_c4);
          }
          else if(data_5[i][j] == 3){
            fill(108, 200, 240);
            rect(1090 + i * w, 140 + j * h_c4, w, h_c4);
          }
          else{
            noFill();
            rect(1090 + i * w, 140 + j * h_c4, w, h_c4);
          }
        
      }
    }
    
    renga(rx1, ry1);
    renga(rx2, ry2);
    renga(rx3, ry3);
    solid(sx1, sy1);
    solid(sx1 + bs*2, sy1);
    tsuta(bs * 6, onblock - bs * (3 + 72 / 14) );
    renga(bs * 17, onblock - bs * 5);
    renga(bs * 18, onblock - bs * 5);
    renga(bs * 19, onblock - bs * 5);
    renga(bs * 23, gy - bs * 4);


    //土管1･2
    dokan_1(dkx_1, dky_1);
    dokan_2(dkx_2, dky_2);
    textSize(width / 10);
    textFont('Chlorinap');
    fill(255,255,0);
    text("COURSE CLEAR", width / 10, height / 2);
  }
  time_m+=1;
  //ゲームオーバー
  if(big<0){
    background(0,0,0);
    textSize(width / 8);
    textFont('Chlorinap');
    fill(255,0,0);
    text("Game Over", width / 8, height / 2);
    deadmario(x,y);
    y+=5;
  }
}

function keyPressed(){
  if(key=="a"){
    vy=-1*jump;
    // if(my == height - ground || my == onblock){
    //   vy=-1*jump;
    // }
  }
}

function windowResized(){
  resizeCanvas(windowWidth, windowHeight);
}



